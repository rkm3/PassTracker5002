---
import Layout from '../../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Backlinks from '../../../../components/Backlinks.astro';

export async function getStaticPaths() {
	const skiAreas = await getCollection('ski-areas');

	// Group ski areas by country and state
	const countryStateAreas = new Map<string, CollectionEntry<'ski-areas'>[]>();

	skiAreas.forEach(area => {
		const key = `${area.data.country}|${area.data.state}`;
		if (!countryStateAreas.has(key)) {
			countryStateAreas.set(key, []);
		}
		countryStateAreas.get(key)?.push(area);
	});

	// Generate paths for each country-state combination
	return Array.from(countryStateAreas.entries()).map(([key, areas]) => {
		const [country, state] = key.split('|');

		// Special handling for U.S.
		const urlCountry = country === 'U.S.' ? 'us' : country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-');
		const urlState = state.toLowerCase().replace(/\s+/g, '-');

		// Create a path for each ski area in this state
		return areas.map(area => {
			return {
				params: {
					country: urlCountry,
					state: urlState,
					slug: area.slug.split('/').slice(2).join('/') // Remove country/state from the slug
				},
				props: { area }
			};
		});
	}).flat();
}

const { area } = Astro.props;
const { Content } = await area.render();
const baseUrl = import.meta.env.BASE_URL;

// Get owners collection for linking
const owners = await getCollection('owners');
const passFamilies = await getCollection('pass-families');

// Create a mapping for pass family names
const passFamilySlugs = new Map();
passFamilies.forEach(passFamily => {
	const passFamilyName = passFamily.data.name;
	const passFamilySlug = passFamily.slug;

	// Store the exact name
	passFamilySlugs.set(passFamilyName, passFamilySlug);

	// Store lowercase version
	passFamilySlugs.set(passFamilyName.toLowerCase(), passFamilySlug);

	// Store first word only (for cases like "Indy Pass" vs "Indy")
	const firstWord = passFamilyName.split(' ')[0];
	passFamilySlugs.set(firstWord, passFamilySlug);
	passFamilySlugs.set(firstWord.toLowerCase(), passFamilySlug);
});

// Function to find owner slug
function findOwnerSlug(ownerName: string | undefined): string | null {
	if (!ownerName) return null;

	// Try exact match
	const owner = owners.find(o => o.data.name === ownerName);
	if (owner) return owner.slug;

	// Try lowercase match
	const ownerLower = owners.find(o => o.data.name.toLowerCase() === ownerName.toLowerCase());
	if (ownerLower) return ownerLower.slug;

	// Try first word match
	const ownerFirstWord = owners.find(o => {
		const oFirstWord = o.data.name.split(' ')[0];
		const nameFirstWord = ownerName.split(' ')[0];
		return oFirstWord === nameFirstWord;
	});
	if (ownerFirstWord) return ownerFirstWord.slug;

	// Try first word lowercase match
	const ownerFirstWordLower = owners.find(o => {
		const oFirstWord = o.data.name.split(' ')[0].toLowerCase();
		const nameFirstWord = ownerName.split(' ')[0].toLowerCase();
		return oFirstWord === nameFirstWord;
	});
	if (ownerFirstWordLower) return ownerFirstWordLower.slug;

	// Special case for Alterra
	if (ownerName.includes('Alterra')) {
		const alterraOwner = owners.find(o => o.data.name.includes('Alterra'));
		if (alterraOwner) return alterraOwner.slug;
	}

	return null;
}

// Function to process pass affiliations
function processPassAffiliations(affiliationsString: string | undefined): string {
	if (!affiliationsString) return '<span class="text-gray-400">—</span>';

	const affiliations = affiliationsString.split(',').map(aff => aff.trim());
	return affiliations.map(affiliation => {
		// Try to find a matching pass family
		let passFamilySlug = null;

		// Try exact match
		passFamilySlug = passFamilySlugs.get(affiliation);

		// Try lowercase match
		if (!passFamilySlug) {
			passFamilySlug = passFamilySlugs.get(affiliation.toLowerCase());
		}

		// Try first word match
		if (!passFamilySlug) {
			const firstWord = affiliation.split(' ')[0];
			passFamilySlug = passFamilySlugs.get(firstWord);
		}

		// Try first word lowercase match
		if (!passFamilySlug) {
			const firstWord = affiliation.split(' ')[0].toLowerCase();
			passFamilySlug = passFamilySlugs.get(firstWord);
		}

		// Special cases
		if (!passFamilySlug) {
			if (affiliation.includes('Epic')) {
				passFamilySlug = passFamilySlugs.get('Epic');
			} else if (affiliation.includes('Ikon')) {
				passFamilySlug = passFamilySlugs.get('Ikon');
			} else if (affiliation.includes('Indy')) {
				passFamilySlug = passFamilySlugs.get('Indy');
			} else if (affiliation.includes('Mountain Collective')) {
				passFamilySlug = passFamilySlugs.get('Mountain Collective');
			} else if (affiliation.includes('Powder Alliance')) {
				passFamilySlug = passFamilySlugs.get('Powder Alliance');
			} else if (affiliation.includes('Freedom')) {
				passFamilySlug = passFamilySlugs.get('Freedom');
			} else if (affiliation.includes('Power')) {
				passFamilySlug = passFamilySlugs.get('Power');
			} else if (affiliation.includes('New England Pass')) {
				passFamilySlug = passFamilySlugs.get('New England Pass');
			} else if (affiliation.includes('Uphill New England')) {
				passFamilySlug = passFamilySlugs.get('Uphill New England');
			}
		}

		if (passFamilySlug) {
			return `<a href="${baseUrl}/pass-families/${passFamilySlug}" class="text-blue-600 hover:underline">${affiliation}</a>`;
		} else {
			return affiliation;
		}
	}).join(', ');
}

// Find owner slug for this ski area
const ownerSlug = findOwnerSlug(area.data.owner);
---

<Layout title={`${area.data.mountain}`}>
	<div class="max-w-4xl mx-auto">
		<nav class="mb-8">
			<a href={`${baseUrl}/ski-areas/${area.data.country === 'U.S.' ? 'us' : area.data.country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-')}/${area.data.state.toLowerCase().replace(/\s+/g, '-')}`} class="text-blue-600 hover:underline">← Back to {area.data.state}, {area.data.country}</a>
		</nav>

		<div class="bg-white rounded-lg shadow-lg p-8">
			<h1 class="text-4xl font-bold mb-4">{area.data.mountain}</h1>
			<div class="text-lg text-gray-600 mb-8">
				<a href={`${baseUrl}/ski-areas/${area.data.country === 'U.S.' ? 'us' : area.data.country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-')}`} class="text-blue-600 hover:underline">{area.data.country}</a>
				{' - '}
				<a href={`${baseUrl}/ski-areas/${area.data.country === 'U.S.' ? 'us' : area.data.country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-')}/${area.data.state.toLowerCase().replace(/\s+/g, '-')}`} class="text-blue-600 hover:underline">{area.data.state}</a>
			</div>

			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
				<div>
					<h2 class="text-xl font-semibold mb-4">Mountain Stats</h2>
					<dl class="space-y-2">
						<div class="flex justify-between">
							<dt class="font-medium">Vertical Drop:</dt>
							<dd>{area.data.verticalDrop || 'N/A'}</dd>
						</div>
						<div class="flex justify-between">
							<dt class="font-medium">Skiable Acres:</dt>
							<dd>{area.data.skiableAcres || 'N/A'}</dd>
						</div>
						<div class="flex justify-between">
							<dt class="font-medium">Annual Snowfall:</dt>
							<dd>{area.data.annualSnowfall || 'N/A'}</dd>
						</div>
					</dl>
				</div>

				<div>
					<h2 class="text-xl font-semibold mb-4">Operations</h2>
					<dl class="space-y-2">
						<div class="flex justify-between">
							<dt class="font-medium">Owner:</dt>
							<dd>
								{ownerSlug ? (
									<a href={`${baseUrl}/owners/${ownerSlug}`} class="text-blue-600 hover:underline">
										{area.data.owner}
									</a>
								) : (
									area.data.owner || 'Independent'
								)}
							</dd>
						</div>
						<div class="flex justify-between">
							<dt class="font-medium">Pass Affiliations:</dt>
							<dd set:html={processPassAffiliations(area.data.passAffiliations)}></dd>
						</div>
						<div class="flex justify-between">
							<dt class="font-medium">Operating 2024-25:</dt>
							<dd>{area.data.operating2425}</dd>
						</div>
						<div class="flex justify-between">
							<dt class="font-medium">Operated 2023-24:</dt>
							<dd>{area.data.operated2324}</dd>
						</div>
					</dl>
				</div>
			</div>

			<div class="prose max-w-none">
				<Content />
			</div>

			<Backlinks pathname={Astro.url.pathname} />
		</div>
	</div>
</Layout>
