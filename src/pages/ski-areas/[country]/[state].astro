---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
	const skiAreas = await getCollection('ski-areas');

	// Get unique country-state combinations
	const countryStatePairs = new Set<string>();
	skiAreas.forEach(area => {
		countryStatePairs.add(`${area.data.country}|${area.data.state}`);
	});

	return Array.from(countryStatePairs).map(pair => {
		const [country, state] = pair.split('|');

		// Filter ski areas for this country and state
		const stateSkiAreas = skiAreas.filter(
			area => area.data.country === country && area.data.state === state
		).sort((a, b) => a.data.mountain.localeCompare(b.data.mountain));

		// Special handling for U.S.
		const urlCountry = country === 'U.S.' ? 'us' : country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-');

		return {
			params: {
				country: urlCountry,
				state: state.toLowerCase().replace(/\s+/g, '-')
			},
			props: {
				country,
				state,
				skiAreas: stateSkiAreas
			}
		};
	});
}

interface Props {
	country: string;
	state: string;
	skiAreas: CollectionEntry<'ski-areas'>[];
}

const { country, state, skiAreas } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;

// Get owners collection for linking
const owners = await getCollection('owners');
const passFamilies = await getCollection('pass-families');

// Create a mapping for pass family names
const passFamilySlugs = new Map();
passFamilies.forEach(passFamily => {
	const passFamilyName = passFamily.data.name;
	const passFamilySlug = passFamily.slug;

	// Store the exact name
	passFamilySlugs.set(passFamilyName, passFamilySlug);

	// Store lowercase version
	passFamilySlugs.set(passFamilyName.toLowerCase(), passFamilySlug);

	// Store first word only (for cases like "Indy Pass" vs "Indy")
	const firstWord = passFamilyName.split(' ')[0];
	passFamilySlugs.set(firstWord, passFamilySlug);
	passFamilySlugs.set(firstWord.toLowerCase(), passFamilySlug);
});

// Function to find owner slug
function findOwnerSlug(ownerName: string | undefined): string | null {
	if (!ownerName) return null;

	// Try exact match
	const owner = owners.find(o => o.data.name === ownerName);
	if (owner) return owner.slug;

	// Try lowercase match
	const ownerLower = owners.find(o => o.data.name.toLowerCase() === ownerName.toLowerCase());
	if (ownerLower) return ownerLower.slug;

	// Try first word match
	const ownerFirstWord = owners.find(o => {
		const oFirstWord = o.data.name.split(' ')[0];
		const nameFirstWord = ownerName.split(' ')[0];
		return oFirstWord === nameFirstWord;
	});
	if (ownerFirstWord) return ownerFirstWord.slug;

	// Try first word lowercase match
	const ownerFirstWordLower = owners.find(o => {
		const oFirstWord = o.data.name.split(' ')[0].toLowerCase();
		const nameFirstWord = ownerName.split(' ')[0].toLowerCase();
		return oFirstWord === nameFirstWord;
	});
	if (ownerFirstWordLower) return ownerFirstWordLower.slug;

	// Special case for Alterra
	if (ownerName.includes('Alterra')) {
		const alterraOwner = owners.find(o => o.data.name.includes('Alterra'));
		if (alterraOwner) return alterraOwner.slug;
	}

	return null;
}

// Function to process pass affiliations
function processPassAffiliations(affiliationsString: string | undefined): string {
	if (!affiliationsString) return '<span class="text-gray-400">—</span>';

	const affiliations = affiliationsString.split(',').map(aff => aff.trim());
	return affiliations.map(affiliation => {
		// Try to find a matching pass family
		let passFamilySlug = null;

		// Try exact match
		passFamilySlug = passFamilySlugs.get(affiliation);

		// Try lowercase match
		if (!passFamilySlug) {
			passFamilySlug = passFamilySlugs.get(affiliation.toLowerCase());
		}

		// Try first word match
		if (!passFamilySlug) {
			const firstWord = affiliation.split(' ')[0];
			passFamilySlug = passFamilySlugs.get(firstWord);
		}

		// Try first word lowercase match
		if (!passFamilySlug) {
			const firstWord = affiliation.split(' ')[0].toLowerCase();
			passFamilySlug = passFamilySlugs.get(firstWord);
		}

		// Special cases
		if (!passFamilySlug) {
			if (affiliation.includes('Epic')) {
				passFamilySlug = passFamilySlugs.get('Epic');
			} else if (affiliation.includes('Ikon')) {
				passFamilySlug = passFamilySlugs.get('Ikon');
			} else if (affiliation.includes('Indy')) {
				passFamilySlug = passFamilySlugs.get('Indy');
			} else if (affiliation.includes('Mountain Collective')) {
				passFamilySlug = passFamilySlugs.get('Mountain Collective');
			} else if (affiliation.includes('Powder Alliance')) {
				passFamilySlug = passFamilySlugs.get('Powder Alliance');
			} else if (affiliation.includes('Freedom')) {
				passFamilySlug = passFamilySlugs.get('Freedom');
			} else if (affiliation.includes('Power')) {
				passFamilySlug = passFamilySlugs.get('Power');
			} else if (affiliation.includes('New England Pass')) {
				passFamilySlug = passFamilySlugs.get('New England Pass');
			} else if (affiliation.includes('Uphill New England')) {
				passFamilySlug = passFamilySlugs.get('Uphill New England');
			}
		}

		if (passFamilySlug) {
			return `<a href="${baseUrl}/pass-families/${passFamilySlug}" class="text-blue-600 hover:underline">${affiliation}</a>`;
		} else {
			return affiliation;
		}
	}).join(', ');
}
---

<Layout title={`Ski Areas in ${state}, ${country}`}>
	<div class="max-w-4xl mx-auto">
		<nav class="mb-8">
			<a href={`${baseUrl}/ski-areas/${country === 'U.S.' ? 'us' : country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-')}`} class="text-blue-600 hover:underline">← Back to {country}</a>
		</nav>

		<h1 class="text-4xl font-bold mb-8">Ski Areas in {state}, {country}</h1>

		<div class="overflow-x-auto">
			<table class="min-w-full bg-white border border-gray-300">
				<thead>
					<tr class="bg-gray-100">
						<th class="px-4 py-2 text-left border-b">Mountain</th>
						<th class="px-4 py-2 text-right border-b">Vertical Drop</th>
						<th class="px-4 py-2 text-right border-b">Skiable Acres</th>
						<th class="px-4 py-2 text-left border-b">Owner</th>
						<th class="px-4 py-2 text-left border-b">Pass Affiliations</th>
					</tr>
				</thead>
				<tbody>
					{skiAreas.map((area) => {
						const ownerSlug = findOwnerSlug(area.data.owner);
						return (
							<tr class="hover:bg-gray-50">
								<td class="px-4 py-2 border-b">
									<a
										href={`${baseUrl}/ski-areas/${country === 'U.S.' ? 'us' : country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-')}/${state.toLowerCase().replace(/\s+/g, '-')}/${area.slug.split('/').slice(2).join('/')}`}
										class="text-blue-600 hover:underline"
									>
										{area.data.mountain}
									</a>
								</td>
								<td class="px-4 py-2 border-b text-right">{area.data.verticalDrop || 'N/A'}</td>
								<td class="px-4 py-2 border-b text-right">{area.data.skiableAcres || 'N/A'}</td>
								<td class="px-4 py-2 border-b">
									{ownerSlug ? (
										<a href={`${baseUrl}/owners/${ownerSlug}`} class="text-blue-600 hover:underline">
											{area.data.owner}
										</a>
									) : (
										area.data.owner || 'Independent'
									)}
								</td>
								<td class="px-4 py-2 border-b" set:html={processPassAffiliations(area.data.passAffiliations)}></td>
							</tr>
						);
					})}
				</tbody>
			</table>
		</div>
	</div>
</Layout>