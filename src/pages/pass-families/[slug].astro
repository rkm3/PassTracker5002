---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
	const passFamilies = await getCollection('pass-families');
	return passFamilies.map(passFamily => ({
		params: { slug: passFamily.slug },
		props: { passFamily },
	}));
}

interface Props {
	passFamily: CollectionEntry<'pass-families'>;
}

const { passFamily } = Astro.props;
const { Content } = await passFamily.render();

const baseUrl = import.meta.env.BASE_URL;

// Get all passes
const allPasses = await getCollection('passes');

// Filter passes that belong to this pass family
const familyPasses = allPasses.filter(pass => pass.data.passFamily === passFamily.data.name);

// Group passes by season
const passesBySeason = new Map<string, CollectionEntry<'passes'>[]>();

familyPasses.forEach(pass => {
	const season = pass.data.season;
	if (!passesBySeason.has(season)) {
		passesBySeason.set(season, []);
	}
	passesBySeason.get(season)?.push(pass);
});

// Convert to array and sort by season (descending)
const seasons = Array.from(passesBySeason.entries())
	.map(([season, passes]) => ({
		season,
		passes: passes.sort((a, b) => a.data.name.localeCompare(b.data.name))
	}))
	.sort((a, b) => b.season.localeCompare(a.season));
---

<Layout title={`${passFamily.data.name} - Pass Tracker 5002`}>
	<div class="max-w-4xl mx-auto">
		<div class="flex gap-4 mb-8">
			<a href={`${baseUrl}/pass-families`} class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
				Back to Pass Families
			</a>
		</div>

		<article class="prose lg:prose-xl">
			{passFamily.data.logo && (
				<div class="mb-8">
					<img src={passFamily.data.logo} alt={`${passFamily.data.name} logo`} class="max-h-40 mx-auto" />
				</div>
			)}

			<h1>{passFamily.data.name}</h1>

			{passFamily.data.website && (
				<p>
					<a href={passFamily.data.website} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">
						Visit Website
					</a>
				</p>
			)}

			<Content />
		</article>

		{/* Passes by Season Section */}
		{familyPasses.length > 0 && (
			<div class="mt-12">
				<h2 class="text-2xl font-bold mb-6">Passes by Season</h2>

				<div class="space-y-8">
					{seasons.map(({ season, passes }) => (
						<div class="bg-white rounded-lg shadow-md p-6">
							<h3 class="text-xl font-semibold mb-4">{season} Season</h3>
							<div class="flex flex-wrap gap-3">
								{passes.map(pass => {
									// Get the slug without the season prefix
									const pathParts = pass.slug.split('/');
									// If there's no path parts after the season, use the pass name as the slug
									const slug = pathParts.length > 1
										? pathParts.slice(1).join('/').replace(/\.md$/, '')
										: pass.data.name.toLowerCase().replace(/\s+/g, '-');

									return (
										<a
											href={`${baseUrl}/passes/${season}/${slug}`}
											class="px-4 py-2 bg-blue-100 text-blue-800 rounded-full hover:bg-blue-200 transition-colors"
										>
											{pass.data.name}
										</a>
									);
								})}
							</div>
						</div>
					))}
				</div>
			</div>
		)}
	</div>
</Layout>