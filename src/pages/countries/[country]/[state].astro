---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
	const skiAreas = await getCollection('ski-areas');

	// Get unique country-state combinations
	const countryStatePairs = new Set<string>();
	skiAreas.forEach(area => {
		countryStatePairs.add(`${area.data.country}|${area.data.state}`);
	});

	return Array.from(countryStatePairs).map(pair => {
		const [country, state] = pair.split('|');

		// Filter ski areas for this country and state
		const stateSkiAreas = skiAreas.filter(
			area => area.data.country === country && area.data.state === state
		).sort((a, b) => a.data.mountain.localeCompare(b.data.mountain));

		return {
			params: {
				country: country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-'),
				state: state.toLowerCase().replace(/\s+/g, '-')
			},
			props: {
				country,
				state,
				skiAreas: stateSkiAreas
			}
		};
	});
}

interface Props {
	country: string;
	state: string;
	skiAreas: CollectionEntry<'ski-areas'>[];
}

const { country, state, skiAreas } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
---

<Layout title={`Ski Areas in ${state}, ${country} | Countries`}>
	<div class="max-w-4xl mx-auto">
		<nav class="mb-8">
			<a href={`${baseUrl}/countries/${country.toLowerCase().replace(/\./g, '').replace(/\s+/g, '-')}`} class="text-blue-600 hover:underline">‚Üê Back to {country}</a>
		</nav>

		<h1 class="text-4xl font-bold mb-8">Ski Areas in {state}, {country}</h1>

		<div class="overflow-x-auto">
			<table class="min-w-full bg-white border border-gray-300">
				<thead>
					<tr class="bg-gray-100">
						<th class="px-4 py-2 text-left border-b">Mountain</th>
						<th class="px-4 py-2 text-right border-b">Vertical Drop</th>
						<th class="px-4 py-2 text-right border-b">Skiable Acres</th>
						<th class="px-4 py-2 text-left border-b">Owner</th>
						<th class="px-4 py-2 text-left border-b">Pass Affiliations</th>
					</tr>
				</thead>
				<tbody>
					{skiAreas.map((area) => (
						<tr class="hover:bg-gray-50">
							<td class="px-4 py-2 border-b">
								<a
									href={`${baseUrl}/ski-areas/${area.slug}`}
									class="text-blue-600 hover:underline"
								>
									{area.data.mountain}
								</a>
							</td>
							<td class="px-4 py-2 border-b text-right">{area.data.verticalDrop || 'N/A'}</td>
							<td class="px-4 py-2 border-b text-right">{area.data.skiableAcres || 'N/A'}</td>
							<td class="px-4 py-2 border-b">{area.data.owner || 'Independent'}</td>
							<td class="px-4 py-2 border-b">{area.data.passAffiliations || 'None'}</td>
						</tr>
					))}
				</tbody>
			</table>
		</div>
	</div>
</Layout>